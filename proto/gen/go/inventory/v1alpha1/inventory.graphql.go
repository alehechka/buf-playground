// Code generated by proroc-gen-graphql, DO NOT EDIT.
package inventoryv1alpha1

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_Item                *graphql.Object      // message Item in inventory/v1alpha1/inventory.proto
	gql__type_GetItemResponse     *graphql.Object      // message GetItemResponse in inventory/v1alpha1/inventory.proto
	gql__type_GetItemRequest      *graphql.Object      // message GetItemRequest in inventory/v1alpha1/inventory.proto
	gql__type_CreateItemResponse  *graphql.Object      // message CreateItemResponse in inventory/v1alpha1/inventory.proto
	gql__type_CreateItemRequest   *graphql.Object      // message CreateItemRequest in inventory/v1alpha1/inventory.proto
	gql__input_Item               *graphql.InputObject // message Item in inventory/v1alpha1/inventory.proto
	gql__input_GetItemResponse    *graphql.InputObject // message GetItemResponse in inventory/v1alpha1/inventory.proto
	gql__input_GetItemRequest     *graphql.InputObject // message GetItemRequest in inventory/v1alpha1/inventory.proto
	gql__input_CreateItemResponse *graphql.InputObject // message CreateItemResponse in inventory/v1alpha1/inventory.proto
	gql__input_CreateItemRequest  *graphql.InputObject // message CreateItemRequest in inventory/v1alpha1/inventory.proto
)

func Gql__type_Item() *graphql.Object {
	if gql__type_Item == nil {
		gql__type_Item = graphql.NewObject(graphql.ObjectConfig{
			Name: "Inventoryv1Alpha1_Type_Item",
			Fields: graphql.Fields{
				"item_id": &graphql.Field{
					Type: graphql.String,
				},
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"weight": &graphql.Field{
					Type: graphql.Float,
				},
				"height": &graphql.Field{
					Type: graphql.Float,
				},
				"quantity": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_Item
}

func Gql__type_GetItemResponse() *graphql.Object {
	if gql__type_GetItemResponse == nil {
		gql__type_GetItemResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Inventoryv1Alpha1_Type_GetItemResponse",
			Fields: graphql.Fields{
				"item": &graphql.Field{
					Type: graphql.NewNonNull(Gql__type_Item()),
				},
			},
		})
	}
	return gql__type_GetItemResponse
}

func Gql__type_GetItemRequest() *graphql.Object {
	if gql__type_GetItemRequest == nil {
		gql__type_GetItemRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Inventoryv1Alpha1_Type_GetItemRequest",
			Fields: graphql.Fields{
				"item_id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_GetItemRequest
}

func Gql__type_CreateItemResponse() *graphql.Object {
	if gql__type_CreateItemResponse == nil {
		gql__type_CreateItemResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Inventoryv1Alpha1_Type_CreateItemResponse",
			Fields: graphql.Fields{
				"item": &graphql.Field{
					Type: graphql.NewNonNull(Gql__type_Item()),
				},
			},
		})
	}
	return gql__type_CreateItemResponse
}

func Gql__type_CreateItemRequest() *graphql.Object {
	if gql__type_CreateItemRequest == nil {
		gql__type_CreateItemRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Inventoryv1Alpha1_Type_CreateItemRequest",
			Fields: graphql.Fields{
				"item": &graphql.Field{
					Type: graphql.NewNonNull(Gql__type_Item()),
				},
			},
		})
	}
	return gql__type_CreateItemRequest
}

func Gql__input_Item() *graphql.InputObject {
	if gql__input_Item == nil {
		gql__input_Item = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Inventoryv1Alpha1_Input_Item",
			Fields: graphql.InputObjectConfigFieldMap{
				"item_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"weight": &graphql.InputObjectFieldConfig{
					Type: graphql.Float,
				},
				"height": &graphql.InputObjectFieldConfig{
					Type: graphql.Float,
				},
				"quantity": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Item
}

func Gql__input_GetItemResponse() *graphql.InputObject {
	if gql__input_GetItemResponse == nil {
		gql__input_GetItemResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Inventoryv1Alpha1_Input_GetItemResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"item": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(Gql__input_Item()),
				},
			},
		})
	}
	return gql__input_GetItemResponse
}

func Gql__input_GetItemRequest() *graphql.InputObject {
	if gql__input_GetItemRequest == nil {
		gql__input_GetItemRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Inventoryv1Alpha1_Input_GetItemRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"item_id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_GetItemRequest
}

func Gql__input_CreateItemResponse() *graphql.InputObject {
	if gql__input_CreateItemResponse == nil {
		gql__input_CreateItemResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Inventoryv1Alpha1_Input_CreateItemResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"item": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(Gql__input_Item()),
				},
			},
		})
	}
	return gql__input_CreateItemResponse
}

func Gql__input_CreateItemRequest() *graphql.InputObject {
	if gql__input_CreateItemRequest == nil {
		gql__input_CreateItemRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Inventoryv1Alpha1_Input_CreateItemRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"item": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(Gql__input_Item()),
				},
			},
		})
	}
	return gql__input_CreateItemRequest
}

// graphql__resolver_InventoryService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_InventoryService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_InventoryService creates pointer of service struct
func new_graphql_resolver_InventoryService(conn *grpc.ClientConn, host string, opts []grpc.DialOption) *graphql__resolver_InventoryService {
	return &graphql__resolver_InventoryService{
		conn:        conn,
		host:        host,
		dialOptions: opts,
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_InventoryService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_InventoryService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getItem": &graphql.Field{
			Type: Gql__type_GetItemResponse(),
			Args: graphql.FieldConfigArgument{
				"item_id": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetItemRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getItem")
				}
				client := NewInventoryServiceClient(conn)
				resp, err := client.GetItem(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetItem")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_InventoryService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createItem": &graphql.Field{
			Type: Gql__type_CreateItemResponse(),
			Args: graphql.FieldConfigArgument{
				"item": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(Gql__input_Item()),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateItemRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for createItem")
				}
				client := NewInventoryServiceClient(conn)
				resp, err := client.CreateItem(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CreateItem")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterInventoryServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterInventoryServiceGraphql(mux *runtime.ServeMux, host string, opts ...grpc.DialOption) error {
	return RegisterInventoryServiceGraphqlHandler(mux, nil, host, opts...)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it manually when application will terminate.
func RegisterInventoryServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn, host string, opts ...grpc.DialOption) error {
	return mux.AddHandler(new_graphql_resolver_InventoryService(conn, host, opts))
}
